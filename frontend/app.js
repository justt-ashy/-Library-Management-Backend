const API = 'http://localhost:8080';
const $ = s=>document.querySelector(s); const $$=s=>Array.from(document.querySelectorAll(s));

// Session (localStorage)
const Session = {
  get user(){const v=localStorage.getItem('lms_user');return v?JSON.parse(v):null},
  set user(u){u?localStorage.setItem('lms_user',JSON.stringify(u)):localStorage.removeItem('lms_user')}
};

const toast = (m,t='info')=>{const el=$('#toast');el.textContent=m;el.classList.remove('hidden');el.style.background=t==='error'?'#dc2626':t==='success'?'#16a34a':'#111827';clearTimeout(toast._t);toast._t=setTimeout(()=>el.classList.add('hidden'),2200)};

function showAuth(){ if(Session.user){ $('#auth-guest').classList.add('hidden'); $('#auth-user').classList.remove('hidden'); $('#user-info').textContent=`${Session.user.display_name||Session.user.username} (${Session.user.role})`; } else { $('#auth-guest').classList.remove('hidden'); $('#auth-user').classList.add('hidden'); } }

async function request(path, opts={}){ const res = await fetch(`${API}${path}`, { headers:{ 'Content-Type':'application/json', ...(opts.headers||{}) }, method:opts.method||'GET', body: opts.body? JSON.stringify(opts.body):undefined }); if(!res.ok){ throw new Error(`${res.status}`); } const ct = res.headers.get('content-type')||''; return ct.includes('application/json')? res.json(): res.text(); }

const Views = {
  async home(){ const [b,c,i] = await Promise.all([request('/books'),request('/categories'),request('/issued-books')]); return `<div class="grid"><div class="card"><div class="muted">Books</div><div style="font-size:26px;font-weight:700">${b.length}</div></div><div class="card"><div class="muted">Categories</div><div style="font-size:26px;font-weight:700">${c.length}</div></div><div class="card"><div class="muted">Issued</div><div style="font-size:26px;font-weight:700">${i.length}</div></div></div>`; },
  async books(){ const cats=await request('/categories'); const books=await request('/books'); const catOpts=cats.map(c=>`<option value="${c.id}">${c.name}</option>`).join(''); const list=books.map(b=>`<div class="card"><div class="section-header"><h3 style="margin:0">${b.title}</h3><div><button class="btn" data-edit-book="${b.id}">Edit</button><button class="btn btn-danger" data-del-book="${b.id}">Delete</button></div></div><div class="muted">Tag: ${b.tag}</div><div class="muted">Authors: ${b.authors}</div><div class="muted">Category: ${b.category?b.category.name:'—'}</div><div class="muted">Status: ${b.status===1?'Available':'Not Available'}</div></div>`).join(''); return `<div class="section-header"><h2>Books</h2><button id="btn-open-add-book" class="btn btn-primary">Add Book</button></div><div class="grid">${list||'<div class="muted">No books</div>'}</div><div id="panel-add-book" class="modal hidden"><div class="modal-card"><div class="modal-header"><h3>Add Book</h3><button class="modal-close" data-close>×</button></div><form id="form-add-book" class="form"><div class="row"><label style="flex:1"><span>Title</span><input name="title" required></label><label style="flex:1"><span>Tag</span><input name="tag" required></label></div><label><span>Authors</span><input name="authors" required></label><div class="row"><label style="flex:1"><span>Publisher</span><input name="publisher"></label><label style="flex:1"><span>ISBN</span><input name="isbn"></label></div><div class="row"><label style="flex:1"><span>Status</span><select name="status"><option value="1">Available</option><option value="0">Not Available</option></select></label><label style="flex:1"><span>Category</span><select name="category" required>${catOpts}</select></label></div><button class="btn btn-primary" type="submit">Create</button></form></div></div>`; },
  async categories(){ const cats=await request('/categories'); const list=cats.map(c=>`<div class="card"><div class="section-header"><h3 style="margin:0">${c.name}</h3><div><button class="btn" data-edit-cat="${c.id}">Edit</button><button class="btn btn-danger" data-del-cat="${c.id}">Delete</button></div></div><div class="muted">Short: ${c.shortName}</div><div class="muted">Notes: ${c.notes||'—'}</div></div>`).join(''); return `<div class="section-header"><h2>Categories</h2><button id="btn-open-add-cat" class="btn btn-primary">Add Category</button></div><div class="grid">${list||'<div class="muted">No categories</div>'}</div><div id="panel-add-cat" class="modal hidden"><div class="modal-card"><div class="modal-header"><h3>Add Category</h3><button class="modal-close" data-close>×</button></div><form id="form-add-cat" class="form"><label><span>Name</span><input name="name" required></label><div class="row"><label style="flex:1"><span>Short Name</span><input name="shortName" maxlength="4" required></label><label style="flex:1"><span>Notes</span><input name="notes"></label></div><button class="btn btn-primary" type="submit">Create</button></form></div></div>`; },
  async issued(){ const items=await request('/issued-books'); const books=await request('/books'); const bookOpts=books.map(b=>`<option value="${b.id}">${b.title} — ${b.authors}</option>`).join(''); const list=items.map(i=>`<div class="card"><div class="section-header"><h3 style="margin:0">${i.book?i.book.title:'Unknown'}</h3><div><button class="btn" data-edit-issued="${i.id}">Edit</button><button class="btn btn-danger" data-del-issued="${i.id}">Delete</button></div></div><div class="muted">Author: ${i.book?i.book.authors:'—'}</div><div class="muted">Status: ${i.returned===1?'Returned':'Issued'}</div></div>`).join(''); return `<div class="section-header"><h2>Issued Books</h2><button id="btn-open-issue" class="btn btn-primary">Issue Book</button></div><div class="grid">${list||'<div class="muted">No records</div>'}</div><div id="panel-issue" class="modal hidden"><div class="modal-card"><div class="modal-header"><h3>Issue Book</h3><button class="modal-close" data-close>×</button></div><form id="form-issue" class="form"><label><span>Book</span><select name="book" required>${bookOpts}</select></label><label><span>Status</span><select name="returned"><option value="0">Issued</option><option value="1">Returned</option></select></label><button class="btn btn-primary" type="submit">Save</button></form></div></div>`; }
};

async function render(){ const h=(location.hash||'#/home').replace('#',''); const root=$('#app'); root.innerHTML='<div class="card">Loading...</div>'; try{ let html; if(h==='/home') html=await Views.home(); else if(h==='/books') html=await Views.books(); else if(h==='/categories') html=await Views.categories(); else if(h==='/issued') html=await Views.issued(); else html='<div class="card">Not Found</div>'; root.innerHTML=html; wire(h); }catch(e){ root.innerHTML=`<div class="card">Error: ${e.message}</div>`; } }

function wire(view){ const overlay=$('#modal-overlay'); const open=id=>{overlay.classList.remove('hidden');$(id).classList.remove('hidden')}; const closeAll=()=>{overlay.classList.add('hidden'); $$('.modal').forEach(m=>m.classList.add('hidden'))}; overlay.onclick=closeAll; $$('[data-close]').forEach(b=>b.onclick=closeAll);
  if(view==='/books'){ const openBtn=$('#btn-open-add-book'); if(openBtn) openBtn.onclick=()=>open('#panel-add-book'); const form=$('#form-add-book'); if(form) form.onsubmit=async e=>{ e.preventDefault(); const fd=new FormData(form); const body={ title:fd.get('title'), tag:fd.get('tag'), authors:fd.get('authors'), publisher:fd.get('publisher')||null, isbn:fd.get('isbn')||null, status:Number(fd.get('status')), category:{ id:Number(fd.get('category')) } }; try{ await request('/books',{method:'POST',body}); toast('Book added','success'); closeAll(); render(); }catch(err){ toast('Add failed','error'); } }; $$('[data-del-book]').forEach(b=> b.onclick=async()=>{ if(!confirm('Delete this book?'))return; try{ await request(`/books/${b.getAttribute('data-del-book')}`,{method:'DELETE'}); toast('Deleted','success'); render(); }catch(err){ toast('Delete failed','error'); } }); }
  if(view==='/categories'){ const openBtn=$('#btn-open-add-cat'); if(openBtn) openBtn.onclick=()=>open('#panel-add-cat'); const form=$('#form-add-cat'); if(form) form.onsubmit=async e=>{ e.preventDefault(); const fd=new FormData(form); const body={ name:fd.get('name'), shortName:fd.get('shortName'), notes:fd.get('notes')||null }; try{ await request('/categories',{method:'POST',body}); toast('Category added','success'); closeAll(); render(); }catch(err){ toast('Add failed','error'); } }; $$('[data-del-cat]').forEach(b=> b.onclick=async()=>{ if(!confirm('Delete this category?'))return; try{ await request(`/categories/${b.getAttribute('data-del-cat')}`,{method:'DELETE'}); toast('Deleted','success'); render(); }catch(err){ toast('Delete failed','error'); } }); }
  if(view==='/issued'){ const openBtn=$('#btn-open-issue'); if(openBtn) openBtn.onclick=()=>open('#panel-issue'); const form=$('#form-issue'); if(form) form.onsubmit=async e=>{ e.preventDefault(); const fd=new FormData(form); const body={ book:{ id:Number(fd.get('book')) }, returned:Number(fd.get('returned')) }; try{ await request('/issued-books',{method:'POST',body}); toast('Saved','success'); closeAll(); render(); }catch(err){ toast('Save failed','error'); } }; $$('[data-del-issued]').forEach(b=> b.onclick=async()=>{ if(!confirm('Delete this record?'))return; try{ await request(`/issued-books/${b.getAttribute('data-del-issued')}`,{method:'DELETE'}); toast('Deleted','success'); render(); }catch(err){ toast('Delete failed','error'); } }); }
}

// Auth
$('#btn-open-login').onclick=()=>{ $('#modal-overlay').classList.remove('hidden'); $('#modal-login').classList.remove('hidden'); };
$('#btn-open-signup').onclick=()=>{ $('#modal-overlay').classList.remove('hidden'); $('#modal-signup').classList.remove('hidden'); };
$$('[data-close]').forEach(b=> b.onclick=()=>{ $('#modal-overlay').classList.add('hidden'); $$('.modal').forEach(m=>m.classList.add('hidden')); });

$('#form-login').onsubmit=async e=>{ e.preventDefault(); const fd=new FormData(e.target); try{ const resp=await request('/auth/login',{method:'POST',body:{username:fd.get('username'),password:fd.get('password')}}); if(resp.message==='LOGIN_SUCCESS'){ Session.user={ username:resp.username, role:resp.role, display_name:resp.username }; showAuth(); toast('Logged in','success'); $('#modal-overlay').classList.add('hidden'); $('#modal-login').classList.add('hidden'); render(); } else { throw new Error('failed'); } }catch(err){ toast('Login failed','error'); } };
$('#form-signup').onsubmit=async e=>{ e.preventDefault(); const fd=new FormData(e.target); try{ const user=await request('/auth/signup',{method:'POST',body:{ username:fd.get('username'), password:fd.get('password'), display_name:fd.get('display_name'), role:fd.get('role'), active:true }}); Session.user={ username:user.username, role:user.role, display_name:user.display_name||user.displayName||user.username }; showAuth(); toast('Account created','success'); $('#modal-overlay').classList.add('hidden'); $('#modal-signup').classList.add('hidden'); render(); }catch(err){ toast('Signup failed','error'); } };
$('#btn-logout').onclick=()=>{ Session.user=null; showAuth(); toast('Logged out','success'); render(); };

// Init
showAuth();
window.location.hash = window.location.hash || '#/home';
window.addEventListener('hashchange', render);
render();


